/* tslint:disable */
/* eslint-disable */
/**
 * MIT OL Unified Ecommerce API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * BasketItem model serializer
 * @export
 * @interface BasketItem
 */
export interface BasketItem {
    /**
     * 
     * @type {number}
     * @memberof BasketItem
     */
    'basket': number;
    /**
     * 
     * @type {number}
     * @memberof BasketItem
     */
    'product': number;
    /**
     * 
     * @type {number}
     * @memberof BasketItem
     */
    'id': number;
}
/**
 * BasketItem model serializer
 * @export
 * @interface BasketItemRequest
 */
export interface BasketItemRequest {
    /**
     * 
     * @type {number}
     * @memberof BasketItemRequest
     */
    'basket': number;
    /**
     * 
     * @type {number}
     * @memberof BasketItemRequest
     */
    'product': number;
}
/**
 * Basket item model serializer with product information
 * @export
 * @interface BasketItemWithProduct
 */
export interface BasketItemWithProduct {
    /**
     * 
     * @type {Product}
     * @memberof BasketItemWithProduct
     */
    'product': Product;
    /**
     * 
     * @type {number}
     * @memberof BasketItemWithProduct
     */
    'id': number;
    /**
     * Return the total price of the basket item with discounts.
     * @type {number}
     * @memberof BasketItemWithProduct
     */
    'price': number;
    /**
     * Get the price of the basket item with applicable discounts.  Returns:     Decimal: The price of the basket item reduced by an applicable discount.
     * @type {number}
     * @memberof BasketItemWithProduct
     */
    'discounted_price': number;
    /**
     * 
     * @type {number}
     * @memberof BasketItemWithProduct
     */
    'quantity'?: number;
    /**
     * 
     * @type {SimpleDiscount}
     * @memberof BasketItemWithProduct
     */
    'discount_applied': SimpleDiscount;
}
/**
 * Basket model serializer with items and products
 * @export
 * @interface BasketWithProduct
 */
export interface BasketWithProduct {
    /**
     * 
     * @type {number}
     * @memberof BasketWithProduct
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof BasketWithProduct
     */
    'user': number;
    /**
     * 
     * @type {IntegratedSystem}
     * @memberof BasketWithProduct
     */
    'integrated_system': IntegratedSystem;
    /**
     * 
     * @type {Array<BasketItemWithProduct>}
     * @memberof BasketWithProduct
     */
    'basket_items': Array<BasketItemWithProduct>;
    /**
     * Get the subtotal for the basket
     * @type {number}
     * @memberof BasketWithProduct
     */
    'subtotal': number;
    /**
     * Get the tax for the basket
     * @type {number}
     * @memberof BasketWithProduct
     */
    'tax': number;
    /**
     * 
     * @type {TaxRate}
     * @memberof BasketWithProduct
     */
    'tax_rate': TaxRate;
    /**
     * Get the total price for the basket
     * @type {number}
     * @memberof BasketWithProduct
     */
    'total_price': number;
}
/**
 * Serializer for companies.
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'name': string;
}
/**
 * * `AF` - Afghanistan * `AX` - Åland Islands * `AL` - Albania * `DZ` - Algeria * `AS` - American Samoa * `AD` - Andorra * `AO` - Angola * `AI` - Anguilla * `AQ` - Antarctica * `AG` - Antigua and Barbuda * `AR` - Argentina * `AM` - Armenia * `AW` - Aruba * `AU` - Australia * `AT` - Austria * `AZ` - Azerbaijan * `BS` - Bahamas * `BH` - Bahrain * `BD` - Bangladesh * `BB` - Barbados * `BY` - Belarus * `BE` - Belgium * `BZ` - Belize * `BJ` - Benin * `BM` - Bermuda * `BT` - Bhutan * `BO` - Bolivia * `BQ` - Bonaire, Sint Eustatius and Saba * `BA` - Bosnia and Herzegovina * `BW` - Botswana * `BV` - Bouvet Island * `BR` - Brazil * `IO` - British Indian Ocean Territory * `BN` - Brunei * `BG` - Bulgaria * `BF` - Burkina Faso * `BI` - Burundi * `CV` - Cabo Verde * `KH` - Cambodia * `CM` - Cameroon * `CA` - Canada * `KY` - Cayman Islands * `CF` - Central African Republic * `TD` - Chad * `CL` - Chile * `CN` - China * `CX` - Christmas Island * `CC` - Cocos (Keeling) Islands * `CO` - Colombia * `KM` - Comoros * `CG` - Congo * `CD` - Congo (the Democratic Republic of the) * `CK` - Cook Islands * `CR` - Costa Rica * `CI` - Côte d\'Ivoire * `HR` - Croatia * `CU` - Cuba * `CW` - Curaçao * `CY` - Cyprus * `CZ` - Czechia * `DK` - Denmark * `DJ` - Djibouti * `DM` - Dominica * `DO` - Dominican Republic * `EC` - Ecuador * `EG` - Egypt * `SV` - El Salvador * `GQ` - Equatorial Guinea * `ER` - Eritrea * `EE` - Estonia * `SZ` - Eswatini * `ET` - Ethiopia * `FK` - Falkland Islands (Malvinas) * `FO` - Faroe Islands * `FJ` - Fiji * `FI` - Finland * `FR` - France * `GF` - French Guiana * `PF` - French Polynesia * `TF` - French Southern Territories * `GA` - Gabon * `GM` - Gambia * `GE` - Georgia * `DE` - Germany * `GH` - Ghana * `GI` - Gibraltar * `GR` - Greece * `GL` - Greenland * `GD` - Grenada * `GP` - Guadeloupe * `GU` - Guam * `GT` - Guatemala * `GG` - Guernsey * `GN` - Guinea * `GW` - Guinea-Bissau * `GY` - Guyana * `HT` - Haiti * `HM` - Heard Island and McDonald Islands * `VA` - Holy See * `HN` - Honduras * `HK` - Hong Kong * `HU` - Hungary * `IS` - Iceland * `IN` - India * `ID` - Indonesia * `IR` - Iran * `IQ` - Iraq * `IE` - Ireland * `IM` - Isle of Man * `IL` - Israel * `IT` - Italy * `JM` - Jamaica * `JP` - Japan * `JE` - Jersey * `JO` - Jordan * `KZ` - Kazakhstan * `KE` - Kenya * `KI` - Kiribati * `KW` - Kuwait * `KG` - Kyrgyzstan * `LA` - Laos * `LV` - Latvia * `LB` - Lebanon * `LS` - Lesotho * `LR` - Liberia * `LY` - Libya * `LI` - Liechtenstein * `LT` - Lithuania * `LU` - Luxembourg * `MO` - Macao * `MG` - Madagascar * `MW` - Malawi * `MY` - Malaysia * `MV` - Maldives * `ML` - Mali * `MT` - Malta * `MH` - Marshall Islands * `MQ` - Martinique * `MR` - Mauritania * `MU` - Mauritius * `YT` - Mayotte * `MX` - Mexico * `FM` - Micronesia * `MD` - Moldova * `MC` - Monaco * `MN` - Mongolia * `ME` - Montenegro * `MS` - Montserrat * `MA` - Morocco * `MZ` - Mozambique * `MM` - Myanmar * `NA` - Namibia * `NR` - Nauru * `NP` - Nepal * `NL` - Netherlands * `NC` - New Caledonia * `NZ` - New Zealand * `NI` - Nicaragua * `NE` - Niger * `NG` - Nigeria * `NU` - Niue * `NF` - Norfolk Island * `KP` - North Korea * `MK` - North Macedonia * `MP` - Northern Mariana Islands * `NO` - Norway * `OM` - Oman * `PK` - Pakistan * `PW` - Palau * `PS` - Palestine, State of * `PA` - Panama * `PG` - Papua New Guinea * `PY` - Paraguay * `PE` - Peru * `PH` - Philippines * `PN` - Pitcairn * `PL` - Poland * `PT` - Portugal * `PR` - Puerto Rico * `QA` - Qatar * `RE` - Réunion * `RO` - Romania * `RU` - Russia * `RW` - Rwanda * `BL` - Saint Barthélemy * `SH` - Saint Helena, Ascension and Tristan da Cunha * `KN` - Saint Kitts and Nevis * `LC` - Saint Lucia * `MF` - Saint Martin (French part) * `PM` - Saint Pierre and Miquelon * `VC` - Saint Vincent and the Grenadines * `WS` - Samoa * `SM` - San Marino * `ST` - Sao Tome and Principe * `SA` - Saudi Arabia * `SN` - Senegal * `RS` - Serbia * `SC` - Seychelles * `SL` - Sierra Leone * `SG` - Singapore * `SX` - Sint Maarten (Dutch part) * `SK` - Slovakia * `SI` - Slovenia * `SB` - Solomon Islands * `SO` - Somalia * `ZA` - South Africa * `GS` - South Georgia and the South Sandwich Islands * `KR` - South Korea * `SS` - South Sudan * `ES` - Spain * `LK` - Sri Lanka * `SD` - Sudan * `SR` - Suriname * `SJ` - Svalbard and Jan Mayen * `SE` - Sweden * `CH` - Switzerland * `SY` - Syria * `TW` - Taiwan * `TJ` - Tajikistan * `TZ` - Tanzania * `TH` - Thailand * `TL` - Timor-Leste * `TG` - Togo * `TK` - Tokelau * `TO` - Tonga * `TT` - Trinidad and Tobago * `TN` - Tunisia * `TR` - Türkiye * `TM` - Turkmenistan * `TC` - Turks and Caicos Islands * `TV` - Tuvalu * `UG` - Uganda * `UA` - Ukraine * `AE` - United Arab Emirates * `GB` - United Kingdom * `UM` - United States Minor Outlying Islands * `US` - United States of America * `UY` - Uruguay * `UZ` - Uzbekistan * `VU` - Vanuatu * `VE` - Venezuela * `VN` - Vietnam * `VG` - Virgin Islands (British) * `VI` - Virgin Islands (U.S.) * `WF` - Wallis and Futuna * `EH` - Western Sahara * `YE` - Yemen * `ZM` - Zambia * `ZW` - Zimbabwe
 * @export
 * @enum {string}
 */

export const CountryCodeEnum = {
    /**
    * Afghanistan
    */
    Af: 'AF',
    /**
    * Åland Islands
    */
    Ax: 'AX',
    /**
    * Albania
    */
    Al: 'AL',
    /**
    * Algeria
    */
    Dz: 'DZ',
    /**
    * American Samoa
    */
    As: 'AS',
    /**
    * Andorra
    */
    Ad: 'AD',
    /**
    * Angola
    */
    Ao: 'AO',
    /**
    * Anguilla
    */
    Ai: 'AI',
    /**
    * Antarctica
    */
    Aq: 'AQ',
    /**
    * Antigua and Barbuda
    */
    Ag: 'AG',
    /**
    * Argentina
    */
    Ar: 'AR',
    /**
    * Armenia
    */
    Am: 'AM',
    /**
    * Aruba
    */
    Aw: 'AW',
    /**
    * Australia
    */
    Au: 'AU',
    /**
    * Austria
    */
    At: 'AT',
    /**
    * Azerbaijan
    */
    Az: 'AZ',
    /**
    * Bahamas
    */
    Bs: 'BS',
    /**
    * Bahrain
    */
    Bh: 'BH',
    /**
    * Bangladesh
    */
    Bd: 'BD',
    /**
    * Barbados
    */
    Bb: 'BB',
    /**
    * Belarus
    */
    By: 'BY',
    /**
    * Belgium
    */
    Be: 'BE',
    /**
    * Belize
    */
    Bz: 'BZ',
    /**
    * Benin
    */
    Bj: 'BJ',
    /**
    * Bermuda
    */
    Bm: 'BM',
    /**
    * Bhutan
    */
    Bt: 'BT',
    /**
    * Bolivia
    */
    Bo: 'BO',
    /**
    * Bonaire, Sint Eustatius and Saba
    */
    Bq: 'BQ',
    /**
    * Bosnia and Herzegovina
    */
    Ba: 'BA',
    /**
    * Botswana
    */
    Bw: 'BW',
    /**
    * Bouvet Island
    */
    Bv: 'BV',
    /**
    * Brazil
    */
    Br: 'BR',
    /**
    * British Indian Ocean Territory
    */
    Io: 'IO',
    /**
    * Brunei
    */
    Bn: 'BN',
    /**
    * Bulgaria
    */
    Bg: 'BG',
    /**
    * Burkina Faso
    */
    Bf: 'BF',
    /**
    * Burundi
    */
    Bi: 'BI',
    /**
    * Cabo Verde
    */
    Cv: 'CV',
    /**
    * Cambodia
    */
    Kh: 'KH',
    /**
    * Cameroon
    */
    Cm: 'CM',
    /**
    * Canada
    */
    Ca: 'CA',
    /**
    * Cayman Islands
    */
    Ky: 'KY',
    /**
    * Central African Republic
    */
    Cf: 'CF',
    /**
    * Chad
    */
    Td: 'TD',
    /**
    * Chile
    */
    Cl: 'CL',
    /**
    * China
    */
    Cn: 'CN',
    /**
    * Christmas Island
    */
    Cx: 'CX',
    /**
    * Cocos (Keeling) Islands
    */
    Cc: 'CC',
    /**
    * Colombia
    */
    Co: 'CO',
    /**
    * Comoros
    */
    Km: 'KM',
    /**
    * Congo
    */
    Cg: 'CG',
    /**
    * Congo (the Democratic Republic of the)
    */
    Cd: 'CD',
    /**
    * Cook Islands
    */
    Ck: 'CK',
    /**
    * Costa Rica
    */
    Cr: 'CR',
    /**
    * Côte d&#39;Ivoire
    */
    Ci: 'CI',
    /**
    * Croatia
    */
    Hr: 'HR',
    /**
    * Cuba
    */
    Cu: 'CU',
    /**
    * Curaçao
    */
    Cw: 'CW',
    /**
    * Cyprus
    */
    Cy: 'CY',
    /**
    * Czechia
    */
    Cz: 'CZ',
    /**
    * Denmark
    */
    Dk: 'DK',
    /**
    * Djibouti
    */
    Dj: 'DJ',
    /**
    * Dominica
    */
    Dm: 'DM',
    /**
    * Dominican Republic
    */
    Do: 'DO',
    /**
    * Ecuador
    */
    Ec: 'EC',
    /**
    * Egypt
    */
    Eg: 'EG',
    /**
    * El Salvador
    */
    Sv: 'SV',
    /**
    * Equatorial Guinea
    */
    Gq: 'GQ',
    /**
    * Eritrea
    */
    Er: 'ER',
    /**
    * Estonia
    */
    Ee: 'EE',
    /**
    * Eswatini
    */
    Sz: 'SZ',
    /**
    * Ethiopia
    */
    Et: 'ET',
    /**
    * Falkland Islands (Malvinas)
    */
    Fk: 'FK',
    /**
    * Faroe Islands
    */
    Fo: 'FO',
    /**
    * Fiji
    */
    Fj: 'FJ',
    /**
    * Finland
    */
    Fi: 'FI',
    /**
    * France
    */
    Fr: 'FR',
    /**
    * French Guiana
    */
    Gf: 'GF',
    /**
    * French Polynesia
    */
    Pf: 'PF',
    /**
    * French Southern Territories
    */
    Tf: 'TF',
    /**
    * Gabon
    */
    Ga: 'GA',
    /**
    * Gambia
    */
    Gm: 'GM',
    /**
    * Georgia
    */
    Ge: 'GE',
    /**
    * Germany
    */
    De: 'DE',
    /**
    * Ghana
    */
    Gh: 'GH',
    /**
    * Gibraltar
    */
    Gi: 'GI',
    /**
    * Greece
    */
    Gr: 'GR',
    /**
    * Greenland
    */
    Gl: 'GL',
    /**
    * Grenada
    */
    Gd: 'GD',
    /**
    * Guadeloupe
    */
    Gp: 'GP',
    /**
    * Guam
    */
    Gu: 'GU',
    /**
    * Guatemala
    */
    Gt: 'GT',
    /**
    * Guernsey
    */
    Gg: 'GG',
    /**
    * Guinea
    */
    Gn: 'GN',
    /**
    * Guinea-Bissau
    */
    Gw: 'GW',
    /**
    * Guyana
    */
    Gy: 'GY',
    /**
    * Haiti
    */
    Ht: 'HT',
    /**
    * Heard Island and McDonald Islands
    */
    Hm: 'HM',
    /**
    * Holy See
    */
    Va: 'VA',
    /**
    * Honduras
    */
    Hn: 'HN',
    /**
    * Hong Kong
    */
    Hk: 'HK',
    /**
    * Hungary
    */
    Hu: 'HU',
    /**
    * Iceland
    */
    Is: 'IS',
    /**
    * India
    */
    In: 'IN',
    /**
    * Indonesia
    */
    Id: 'ID',
    /**
    * Iran
    */
    Ir: 'IR',
    /**
    * Iraq
    */
    Iq: 'IQ',
    /**
    * Ireland
    */
    Ie: 'IE',
    /**
    * Isle of Man
    */
    Im: 'IM',
    /**
    * Israel
    */
    Il: 'IL',
    /**
    * Italy
    */
    It: 'IT',
    /**
    * Jamaica
    */
    Jm: 'JM',
    /**
    * Japan
    */
    Jp: 'JP',
    /**
    * Jersey
    */
    Je: 'JE',
    /**
    * Jordan
    */
    Jo: 'JO',
    /**
    * Kazakhstan
    */
    Kz: 'KZ',
    /**
    * Kenya
    */
    Ke: 'KE',
    /**
    * Kiribati
    */
    Ki: 'KI',
    /**
    * Kuwait
    */
    Kw: 'KW',
    /**
    * Kyrgyzstan
    */
    Kg: 'KG',
    /**
    * Laos
    */
    La: 'LA',
    /**
    * Latvia
    */
    Lv: 'LV',
    /**
    * Lebanon
    */
    Lb: 'LB',
    /**
    * Lesotho
    */
    Ls: 'LS',
    /**
    * Liberia
    */
    Lr: 'LR',
    /**
    * Libya
    */
    Ly: 'LY',
    /**
    * Liechtenstein
    */
    Li: 'LI',
    /**
    * Lithuania
    */
    Lt: 'LT',
    /**
    * Luxembourg
    */
    Lu: 'LU',
    /**
    * Macao
    */
    Mo: 'MO',
    /**
    * Madagascar
    */
    Mg: 'MG',
    /**
    * Malawi
    */
    Mw: 'MW',
    /**
    * Malaysia
    */
    My: 'MY',
    /**
    * Maldives
    */
    Mv: 'MV',
    /**
    * Mali
    */
    Ml: 'ML',
    /**
    * Malta
    */
    Mt: 'MT',
    /**
    * Marshall Islands
    */
    Mh: 'MH',
    /**
    * Martinique
    */
    Mq: 'MQ',
    /**
    * Mauritania
    */
    Mr: 'MR',
    /**
    * Mauritius
    */
    Mu: 'MU',
    /**
    * Mayotte
    */
    Yt: 'YT',
    /**
    * Mexico
    */
    Mx: 'MX',
    /**
    * Micronesia
    */
    Fm: 'FM',
    /**
    * Moldova
    */
    Md: 'MD',
    /**
    * Monaco
    */
    Mc: 'MC',
    /**
    * Mongolia
    */
    Mn: 'MN',
    /**
    * Montenegro
    */
    Me: 'ME',
    /**
    * Montserrat
    */
    Ms: 'MS',
    /**
    * Morocco
    */
    Ma: 'MA',
    /**
    * Mozambique
    */
    Mz: 'MZ',
    /**
    * Myanmar
    */
    Mm: 'MM',
    /**
    * Namibia
    */
    Na: 'NA',
    /**
    * Nauru
    */
    Nr: 'NR',
    /**
    * Nepal
    */
    Np: 'NP',
    /**
    * Netherlands
    */
    Nl: 'NL',
    /**
    * New Caledonia
    */
    Nc: 'NC',
    /**
    * New Zealand
    */
    Nz: 'NZ',
    /**
    * Nicaragua
    */
    Ni: 'NI',
    /**
    * Niger
    */
    Ne: 'NE',
    /**
    * Nigeria
    */
    Ng: 'NG',
    /**
    * Niue
    */
    Nu: 'NU',
    /**
    * Norfolk Island
    */
    Nf: 'NF',
    /**
    * North Korea
    */
    Kp: 'KP',
    /**
    * North Macedonia
    */
    Mk: 'MK',
    /**
    * Northern Mariana Islands
    */
    Mp: 'MP',
    /**
    * Norway
    */
    No: 'NO',
    /**
    * Oman
    */
    Om: 'OM',
    /**
    * Pakistan
    */
    Pk: 'PK',
    /**
    * Palau
    */
    Pw: 'PW',
    /**
    * Palestine, State of
    */
    Ps: 'PS',
    /**
    * Panama
    */
    Pa: 'PA',
    /**
    * Papua New Guinea
    */
    Pg: 'PG',
    /**
    * Paraguay
    */
    Py: 'PY',
    /**
    * Peru
    */
    Pe: 'PE',
    /**
    * Philippines
    */
    Ph: 'PH',
    /**
    * Pitcairn
    */
    Pn: 'PN',
    /**
    * Poland
    */
    Pl: 'PL',
    /**
    * Portugal
    */
    Pt: 'PT',
    /**
    * Puerto Rico
    */
    Pr: 'PR',
    /**
    * Qatar
    */
    Qa: 'QA',
    /**
    * Réunion
    */
    Re: 'RE',
    /**
    * Romania
    */
    Ro: 'RO',
    /**
    * Russia
    */
    Ru: 'RU',
    /**
    * Rwanda
    */
    Rw: 'RW',
    /**
    * Saint Barthélemy
    */
    Bl: 'BL',
    /**
    * Saint Helena, Ascension and Tristan da Cunha
    */
    Sh: 'SH',
    /**
    * Saint Kitts and Nevis
    */
    Kn: 'KN',
    /**
    * Saint Lucia
    */
    Lc: 'LC',
    /**
    * Saint Martin (French part)
    */
    Mf: 'MF',
    /**
    * Saint Pierre and Miquelon
    */
    Pm: 'PM',
    /**
    * Saint Vincent and the Grenadines
    */
    Vc: 'VC',
    /**
    * Samoa
    */
    Ws: 'WS',
    /**
    * San Marino
    */
    Sm: 'SM',
    /**
    * Sao Tome and Principe
    */
    St: 'ST',
    /**
    * Saudi Arabia
    */
    Sa: 'SA',
    /**
    * Senegal
    */
    Sn: 'SN',
    /**
    * Serbia
    */
    Rs: 'RS',
    /**
    * Seychelles
    */
    Sc: 'SC',
    /**
    * Sierra Leone
    */
    Sl: 'SL',
    /**
    * Singapore
    */
    Sg: 'SG',
    /**
    * Sint Maarten (Dutch part)
    */
    Sx: 'SX',
    /**
    * Slovakia
    */
    Sk: 'SK',
    /**
    * Slovenia
    */
    Si: 'SI',
    /**
    * Solomon Islands
    */
    Sb: 'SB',
    /**
    * Somalia
    */
    So: 'SO',
    /**
    * South Africa
    */
    Za: 'ZA',
    /**
    * South Georgia and the South Sandwich Islands
    */
    Gs: 'GS',
    /**
    * South Korea
    */
    Kr: 'KR',
    /**
    * South Sudan
    */
    Ss: 'SS',
    /**
    * Spain
    */
    Es: 'ES',
    /**
    * Sri Lanka
    */
    Lk: 'LK',
    /**
    * Sudan
    */
    Sd: 'SD',
    /**
    * Suriname
    */
    Sr: 'SR',
    /**
    * Svalbard and Jan Mayen
    */
    Sj: 'SJ',
    /**
    * Sweden
    */
    Se: 'SE',
    /**
    * Switzerland
    */
    Ch: 'CH',
    /**
    * Syria
    */
    Sy: 'SY',
    /**
    * Taiwan
    */
    Tw: 'TW',
    /**
    * Tajikistan
    */
    Tj: 'TJ',
    /**
    * Tanzania
    */
    Tz: 'TZ',
    /**
    * Thailand
    */
    Th: 'TH',
    /**
    * Timor-Leste
    */
    Tl: 'TL',
    /**
    * Togo
    */
    Tg: 'TG',
    /**
    * Tokelau
    */
    Tk: 'TK',
    /**
    * Tonga
    */
    To: 'TO',
    /**
    * Trinidad and Tobago
    */
    Tt: 'TT',
    /**
    * Tunisia
    */
    Tn: 'TN',
    /**
    * Türkiye
    */
    Tr: 'TR',
    /**
    * Turkmenistan
    */
    Tm: 'TM',
    /**
    * Turks and Caicos Islands
    */
    Tc: 'TC',
    /**
    * Tuvalu
    */
    Tv: 'TV',
    /**
    * Uganda
    */
    Ug: 'UG',
    /**
    * Ukraine
    */
    Ua: 'UA',
    /**
    * United Arab Emirates
    */
    Ae: 'AE',
    /**
    * United Kingdom
    */
    Gb: 'GB',
    /**
    * United States Minor Outlying Islands
    */
    Um: 'UM',
    /**
    * United States of America
    */
    Us: 'US',
    /**
    * Uruguay
    */
    Uy: 'UY',
    /**
    * Uzbekistan
    */
    Uz: 'UZ',
    /**
    * Vanuatu
    */
    Vu: 'VU',
    /**
    * Venezuela
    */
    Ve: 'VE',
    /**
    * Vietnam
    */
    Vn: 'VN',
    /**
    * Virgin Islands (British)
    */
    Vg: 'VG',
    /**
    * Virgin Islands (U.S.)
    */
    Vi: 'VI',
    /**
    * Wallis and Futuna
    */
    Wf: 'WF',
    /**
    * Western Sahara
    */
    Eh: 'EH',
    /**
    * Yemen
    */
    Ye: 'YE',
    /**
    * Zambia
    */
    Zm: 'ZM',
    /**
    * Zimbabwe
    */
    Zw: 'ZW'
} as const;

export type CountryCodeEnum = typeof CountryCodeEnum[keyof typeof CountryCodeEnum];


/**
 * Serializer for creating a basket with products. (For OpenAPI spec.)
 * @export
 * @interface CreateBasketWithProductsRequest
 */
export interface CreateBasketWithProductsRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBasketWithProductsRequest
     */
    'system_slug': string;
    /**
     * 
     * @type {Array<CreateBasketWithProductsSkuRequest>}
     * @memberof CreateBasketWithProductsRequest
     */
    'skus': Array<CreateBasketWithProductsSkuRequest>;
    /**
     * 
     * @type {boolean}
     * @memberof CreateBasketWithProductsRequest
     */
    'checkout': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateBasketWithProductsRequest
     */
    'discount_code': string;
}
/**
 * Defines the schema for a SKU in the CreateBasketWithProductsSerializer.
 * @export
 * @interface CreateBasketWithProductsSkuRequest
 */
export interface CreateBasketWithProductsSkuRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBasketWithProductsSkuRequest
     */
    'sku': string;
    /**
     * 
     * @type {number}
     * @memberof CreateBasketWithProductsSkuRequest
     */
    'quantity': number;
}
/**
 * Serializer for the create from order API.
 * @export
 * @interface CreateFromOrderApiRequest
 */
export interface CreateFromOrderApiRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateFromOrderApiRequest
     */
    'order': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateFromOrderApiRequest
     */
    'lines': Array<number>;
}
/**
 * Really basic serializer for the payload that we need to send to CyberSource.
 * @export
 * @interface CyberSourceCheckout
 */
export interface CyberSourceCheckout {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CyberSourceCheckout
     */
    'payload': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof CyberSourceCheckout
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof CyberSourceCheckout
     */
    'method': string;
}
/**
 * Serializer for discounts.
 * @export
 * @interface Discount
 */
export interface Discount {
    /**
     * 
     * @type {number}
     * @memberof Discount
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Discount
     */
    'discount_code': string;
    /**
     * 
     * @type {string}
     * @memberof Discount
     */
    'amount': string;
    /**
     * 
     * @type {PaymentTypeEnum}
     * @memberof Discount
     */
    'payment_type'?: PaymentTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof Discount
     */
    'max_redemptions'?: number | null;
    /**
     * If set, this discount code will not be redeemable before this date.
     * @type {string}
     * @memberof Discount
     */
    'activation_date'?: string | null;
    /**
     * If set, this discount code will not be redeemable after this date.
     * @type {string}
     * @memberof Discount
     */
    'expiration_date'?: string | null;
    /**
     * 
     * @type {IntegratedSystem}
     * @memberof Discount
     */
    'integrated_system': IntegratedSystem;
    /**
     * 
     * @type {Product}
     * @memberof Discount
     */
    'product': Product;
    /**
     * 
     * @type {Array<User>}
     * @memberof Discount
     */
    'assigned_users': Array<User>;
    /**
     * 
     * @type {Company}
     * @memberof Discount
     */
    'company': Company;
}


/**
 * * `percent-off` - percent-off * `dollars-off` - dollars-off * `fixed-price` - fixed-price
 * @export
 * @enum {string}
 */

export const DiscountTypeEnum = {
    /**
    * percent-off
    */
    PercentOff: 'percent-off',
    /**
    * dollars-off
    */
    DollarsOff: 'dollars-off',
    /**
    * fixed-price
    */
    FixedPrice: 'fixed-price'
} as const;

export type DiscountTypeEnum = typeof DiscountTypeEnum[keyof typeof DiscountTypeEnum];


/**
 * Serializer for IntegratedSystem model.
 * @export
 * @interface IntegratedSystem
 */
export interface IntegratedSystem {
    /**
     * 
     * @type {number}
     * @memberof IntegratedSystem
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystem
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystem
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystem
     */
    'homepage_url'?: string;
}
/**
 * Serializer for IntegratedSystem model.
 * @export
 * @interface IntegratedSystemRequest
 */
export interface IntegratedSystemRequest {
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystemRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystemRequest
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystemRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegratedSystemRequest
     */
    'homepage_url'?: string;
}
/**
 * Serializes a line item for an order.
 * @export
 * @interface Line
 */
export interface Line {
    /**
     * 
     * @type {number}
     * @memberof Line
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Line
     */
    'quantity': number;
    /**
     * Return the item description
     * @type {string}
     * @memberof Line
     */
    'item_description': string;
    /**
     * 
     * @type {string}
     * @memberof Line
     */
    'unit_price': string;
    /**
     * 
     * @type {string}
     * @memberof Line
     */
    'total_price': string;
    /**
     * 
     * @type {Product}
     * @memberof Line
     */
    'product': Product;
}
/**
 * Serializes a line item for an order.
 * @export
 * @interface LineRequest
 */
export interface LineRequest {
    /**
     * 
     * @type {number}
     * @memberof LineRequest
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof LineRequest
     */
    'unit_price': string;
    /**
     * 
     * @type {string}
     * @memberof LineRequest
     */
    'total_price': string;
    /**
     * 
     * @type {ProductRequest}
     * @memberof LineRequest
     */
    'product': ProductRequest;
}
/**
 * 
 * @export
 * @interface Nested
 */
export interface Nested {
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    'updated_on': string;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    'amount': string;
    /**
     * 
     * @type {boolean}
     * @memberof Nested
     */
    'automatic'?: boolean;
    /**
     * 
     * @type {DiscountTypeEnum}
     * @memberof Nested
     */
    'discount_type': DiscountTypeEnum;
    /**
     * 
     * @type {RedemptionTypeEnum}
     * @memberof Nested
     */
    'redemption_type': RedemptionTypeEnum;
    /**
     * 
     * @type {PaymentTypeEnum}
     * @memberof Nested
     */
    'payment_type'?: PaymentTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    'max_redemptions'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    'discount_code': string;
    /**
     * If set, this discount code will not be redeemable before this date.
     * @type {string}
     * @memberof Nested
     */
    'activation_date'?: string | null;
    /**
     * If set, this discount code will not be redeemable after this date.
     * @type {string}
     * @memberof Nested
     */
    'expiration_date'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Nested
     */
    'is_bulk'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    'transaction_number'?: string;
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    'integrated_system'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    'product'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    'bulk_discount_collection'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    'company'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Nested
     */
    'assigned_users'?: Array<number>;
}


/**
 * 
 * @export
 * @interface NestedRequest
 */
export interface NestedRequest {
    /**
     * 
     * @type {string}
     * @memberof NestedRequest
     */
    'amount': string;
    /**
     * 
     * @type {boolean}
     * @memberof NestedRequest
     */
    'automatic'?: boolean;
    /**
     * 
     * @type {DiscountTypeEnum}
     * @memberof NestedRequest
     */
    'discount_type': DiscountTypeEnum;
    /**
     * 
     * @type {RedemptionTypeEnum}
     * @memberof NestedRequest
     */
    'redemption_type': RedemptionTypeEnum;
    /**
     * 
     * @type {PaymentTypeEnum}
     * @memberof NestedRequest
     */
    'payment_type'?: PaymentTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof NestedRequest
     */
    'max_redemptions'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NestedRequest
     */
    'discount_code': string;
    /**
     * If set, this discount code will not be redeemable before this date.
     * @type {string}
     * @memberof NestedRequest
     */
    'activation_date'?: string | null;
    /**
     * If set, this discount code will not be redeemable after this date.
     * @type {string}
     * @memberof NestedRequest
     */
    'expiration_date'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof NestedRequest
     */
    'is_bulk'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NestedRequest
     */
    'transaction_number'?: string;
    /**
     * 
     * @type {number}
     * @memberof NestedRequest
     */
    'integrated_system'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NestedRequest
     */
    'product'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NestedRequest
     */
    'bulk_discount_collection'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NestedRequest
     */
    'company'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof NestedRequest
     */
    'assigned_users'?: Array<number>;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const NullEnum = {
    Null: 'null'
} as const;

export type NullEnum = typeof NullEnum[keyof typeof NullEnum];


/**
 * Serializes an order.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'reference_number'?: string;
    /**
     * 
     * @type {StateEnum}
     * @memberof Order
     */
    'state'?: StateEnum;
    /**
     * 
     * @type {User}
     * @memberof Order
     */
    'purchaser': User;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'total_price_paid': string;
    /**
     * 
     * @type {Array<Line>}
     * @memberof Order
     */
    'lines': Array<Line>;
    /**
     * 
     * @type {Array<RedeemedDiscount>}
     * @memberof Order
     */
    'redeemed_discounts': Array<RedeemedDiscount>;
    /**
     * Return refunds for the order.  Returns an empty set for now, don\'t have that set up yet really. In MITx Online this returned _transactions_ that were refunds, so we want to return the requests that we\'re now collecting.
     * @type {Array<any>}
     * @memberof Order
     */
    'refunds': Array<any>;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'created_on': string;
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof Order
     */
    'transactions': Array<Transaction>;
    /**
     * 
     * @type {TransactionDataPurchaser}
     * @memberof Order
     */
    'street_address': TransactionDataPurchaser;
}


/**
 * Serializer for order history.
 * @export
 * @interface OrderHistory
 */
export interface OrderHistory {
    /**
     * 
     * @type {number}
     * @memberof OrderHistory
     */
    'id': number;
    /**
     * 
     * @type {StateEnum}
     * @memberof OrderHistory
     */
    'state'?: StateEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderHistory
     */
    'reference_number'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderHistory
     */
    'purchaser': number;
    /**
     * 
     * @type {string}
     * @memberof OrderHistory
     */
    'total_price_paid': string;
    /**
     * 
     * @type {Array<Line>}
     * @memberof OrderHistory
     */
    'lines': Array<Line>;
    /**
     * 
     * @type {string}
     * @memberof OrderHistory
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof OrderHistory
     */
    'updated_on': string;
    /**
     * 
     * @type {SimpleDiscount}
     * @memberof OrderHistory
     */
    'discounts_applied': SimpleDiscount;
    /**
     * 
     * @type {Transaction}
     * @memberof OrderHistory
     */
    'transactions': Transaction;
}


/**
 * Serializes an order.
 * @export
 * @interface OrderRequest
 */
export interface OrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderRequest
     */
    'reference_number'?: string;
    /**
     * 
     * @type {StateEnum}
     * @memberof OrderRequest
     */
    'state'?: StateEnum;
    /**
     * 
     * @type {UserRequest}
     * @memberof OrderRequest
     */
    'purchaser': UserRequest;
    /**
     * 
     * @type {string}
     * @memberof OrderRequest
     */
    'total_price_paid': string;
    /**
     * 
     * @type {Array<LineRequest>}
     * @memberof OrderRequest
     */
    'lines': Array<LineRequest>;
    /**
     * 
     * @type {Array<TransactionRequest>}
     * @memberof OrderRequest
     */
    'transactions': Array<TransactionRequest>;
}


/**
 * 
 * @export
 * @interface PaginatedBasketItemList
 */
export interface PaginatedBasketItemList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedBasketItemList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBasketItemList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBasketItemList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<BasketItem>}
     * @memberof PaginatedBasketItemList
     */
    'results': Array<BasketItem>;
}
/**
 * 
 * @export
 * @interface PaginatedBasketWithProductList
 */
export interface PaginatedBasketWithProductList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedBasketWithProductList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBasketWithProductList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBasketWithProductList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<BasketWithProduct>}
     * @memberof PaginatedBasketWithProductList
     */
    'results': Array<BasketWithProduct>;
}
/**
 * 
 * @export
 * @interface PaginatedIntegratedSystemList
 */
export interface PaginatedIntegratedSystemList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedIntegratedSystemList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedIntegratedSystemList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedIntegratedSystemList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<IntegratedSystem>}
     * @memberof PaginatedIntegratedSystemList
     */
    'results': Array<IntegratedSystem>;
}
/**
 * 
 * @export
 * @interface PaginatedOrderHistoryList
 */
export interface PaginatedOrderHistoryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOrderHistoryList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOrderHistoryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOrderHistoryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OrderHistory>}
     * @memberof PaginatedOrderHistoryList
     */
    'results': Array<OrderHistory>;
}
/**
 * 
 * @export
 * @interface PaginatedProductList
 */
export interface PaginatedProductList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProductList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProductList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProductList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof PaginatedProductList
     */
    'results': Array<Product>;
}
/**
 * 
 * @export
 * @interface PaginatedRequestLineList
 */
export interface PaginatedRequestLineList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedRequestLineList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRequestLineList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRequestLineList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<RequestLine>}
     * @memberof PaginatedRequestLineList
     */
    'results': Array<RequestLine>;
}
/**
 * 
 * @export
 * @interface PaginatedRequestList
 */
export interface PaginatedRequestList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedRequestList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRequestList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRequestList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Request>}
     * @memberof PaginatedRequestList
     */
    'results': Array<Request>;
}
/**
 * BasketItem model serializer
 * @export
 * @interface PatchedBasketItemRequest
 */
export interface PatchedBasketItemRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedBasketItemRequest
     */
    'basket'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedBasketItemRequest
     */
    'product'?: number;
}
/**
 * Serializer for IntegratedSystem model.
 * @export
 * @interface PatchedIntegratedSystemRequest
 */
export interface PatchedIntegratedSystemRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedIntegratedSystemRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedIntegratedSystemRequest
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedIntegratedSystemRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedIntegratedSystemRequest
     */
    'homepage_url'?: string;
}
/**
 * Serializer for Product model.
 * @export
 * @interface PatchedProductRequest
 */
export interface PatchedProductRequest {
    /**
     * SKU of the product.
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'sku'?: string;
    /**
     * Short name of the product, displayed in carts/etc.
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'name'?: string;
    /**
     * Long description of the product.
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'description'?: string;
    /**
     * System-specific data for the product (in JSON).
     * @type {any}
     * @memberof PatchedProductRequest
     */
    'system_data'?: any | null;
    /**
     * Owner system of the product.
     * @type {number}
     * @memberof PatchedProductRequest
     */
    'system'?: number;
    /**
     * Price (decimal to two places)
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'price'?: string;
    /**
     * Image metadata including URL, alt text, and description (in JSON).
     * @type {any}
     * @memberof PatchedProductRequest
     */
    'image_metadata'?: any | null;
    /**
     * URL to the product details page.
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'details_url'?: string;
}
/**
 * Serializer for refund request lines.
 * @export
 * @interface PatchedRequestLineRequest
 */
export interface PatchedRequestLineRequest {
    /**
     * The amount refunded for this line item (may not be the full amount charged).
     * @type {string}
     * @memberof PatchedRequestLineRequest
     */
    'refunded_amount'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedRequestLineRequest
     */
    'refund_request'?: number;
    /**
     * The individual line item to refund.
     * @type {number}
     * @memberof PatchedRequestLineRequest
     */
    'line'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedRequestLineRequest
     */
    'transactions'?: Array<number>;
}
/**
 * Serializer for refund requests.
 * @export
 * @interface PatchedRequestRequest
 */
export interface PatchedRequestRequest {
    /**
     * 
     * @type {Array<RequestLineRequest>}
     * @memberof PatchedRequestRequest
     */
    'lines'?: Array<RequestLineRequest>;
    /**
     * 
     * @type {OrderRequest}
     * @memberof PatchedRequestRequest
     */
    'order'?: OrderRequest;
    /**
     * 
     * @type {string}
     * @memberof PatchedRequestRequest
     */
    'zendesk_ticket'?: string;
    /**
     * Reason for refund, supplied by the processing user.
     * @type {string}
     * @memberof PatchedRequestRequest
     */
    'refund_reason'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedRequestRequest
     */
    'requester'?: number;
}
/**
 * * `marketing` - marketing * `sales` - sales * `financial-assistance` - financial-assistance * `customer-support` - customer-support * `staff` - staff * `legacy` - legacy * `credit_card` - credit_card * `purchase_order` - purchase_order
 * @export
 * @enum {string}
 */

export const PaymentTypeEnum = {
    /**
    * marketing
    */
    Marketing: 'marketing',
    /**
    * sales
    */
    Sales: 'sales',
    /**
    * financial-assistance
    */
    FinancialAssistance: 'financial-assistance',
    /**
    * customer-support
    */
    CustomerSupport: 'customer-support',
    /**
    * staff
    */
    Staff: 'staff',
    /**
    * legacy
    */
    Legacy: 'legacy',
    /**
    * credit_card
    */
    CreditCard: 'credit_card',
    /**
    * purchase_order
    */
    PurchaseOrder: 'purchase_order'
} as const;

export type PaymentTypeEnum = typeof PaymentTypeEnum[keyof typeof PaymentTypeEnum];


/**
 * Serializer for Product model.
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id': number;
    /**
     * SKU of the product.
     * @type {string}
     * @memberof Product
     */
    'sku': string;
    /**
     * Short name of the product, displayed in carts/etc.
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * Long description of the product.
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * System-specific data for the product (in JSON).
     * @type {any}
     * @memberof Product
     */
    'system_data'?: any | null;
    /**
     * Owner system of the product.
     * @type {number}
     * @memberof Product
     */
    'system': number;
    /**
     * Price (decimal to two places)
     * @type {string}
     * @memberof Product
     */
    'price': string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'deleted_by_cascade': boolean;
    /**
     * Image metadata including URL, alt text, and description (in JSON).
     * @type {any}
     * @memberof Product
     */
    'image_metadata'?: any | null;
    /**
     * URL to the product details page.
     * @type {string}
     * @memberof Product
     */
    'details_url'?: string;
}
/**
 * Serializer for Product model.
 * @export
 * @interface ProductRequest
 */
export interface ProductRequest {
    /**
     * SKU of the product.
     * @type {string}
     * @memberof ProductRequest
     */
    'sku': string;
    /**
     * Short name of the product, displayed in carts/etc.
     * @type {string}
     * @memberof ProductRequest
     */
    'name': string;
    /**
     * Long description of the product.
     * @type {string}
     * @memberof ProductRequest
     */
    'description': string;
    /**
     * System-specific data for the product (in JSON).
     * @type {any}
     * @memberof ProductRequest
     */
    'system_data'?: any | null;
    /**
     * Owner system of the product.
     * @type {number}
     * @memberof ProductRequest
     */
    'system': number;
    /**
     * Price (decimal to two places)
     * @type {string}
     * @memberof ProductRequest
     */
    'price': string;
    /**
     * Image metadata including URL, alt text, and description (in JSON).
     * @type {any}
     * @memberof ProductRequest
     */
    'image_metadata'?: any | null;
    /**
     * URL to the product details page.
     * @type {string}
     * @memberof ProductRequest
     */
    'details_url'?: string;
}
/**
 * DiscountRedemption model serializer
 * @export
 * @interface RedeemedDiscount
 */
export interface RedeemedDiscount {
    /**
     * 
     * @type {Nested}
     * @memberof RedeemedDiscount
     */
    'discount': Nested;
}
/**
 * * `one-time` - one-time * `one-time-per-user` - one-time-per-user * `unlimited` - unlimited
 * @export
 * @enum {string}
 */

export const RedemptionTypeEnum = {
    /**
    * one-time
    */
    OneTime: 'one-time',
    /**
    * one-time-per-user
    */
    OneTimePerUser: 'one-time-per-user',
    /**
    * unlimited
    */
    Unlimited: 'unlimited'
} as const;

export type RedemptionTypeEnum = typeof RedemptionTypeEnum[keyof typeof RedemptionTypeEnum];


/**
 * Serializer for refund requests.
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * 
     * @type {number}
     * @memberof Request
     */
    'id': number;
    /**
     * 
     * @type {Array<RequestLine>}
     * @memberof Request
     */
    'lines': Array<RequestLine>;
    /**
     * 
     * @type {Order}
     * @memberof Request
     */
    'order': Order;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'updated_on': string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'processed_date': string | null;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'total_refunded': string | null;
    /**
     * 
     * @type {StatusEnum}
     * @memberof Request
     */
    'status': StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'zendesk_ticket'?: string;
    /**
     * Reason for refund, supplied by the processing user.
     * @type {string}
     * @memberof Request
     */
    'refund_reason'?: string;
    /**
     * 
     * @type {number}
     * @memberof Request
     */
    'requester': number;
    /**
     * The user who processed the request. (Usually blank.)
     * @type {number}
     * @memberof Request
     */
    'processed_by': number | null;
}


/**
 * Serializer for refund request lines.
 * @export
 * @interface RequestLine
 */
export interface RequestLine {
    /**
     * 
     * @type {number}
     * @memberof RequestLine
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof RequestLine
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof RequestLine
     */
    'updated_on': string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof RequestLine
     */
    'status': StatusEnum;
    /**
     * The amount refunded for this line item (may not be the full amount charged).
     * @type {string}
     * @memberof RequestLine
     */
    'refunded_amount'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RequestLine
     */
    'refund_request': number;
    /**
     * The individual line item to refund.
     * @type {number}
     * @memberof RequestLine
     */
    'line': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof RequestLine
     */
    'transactions'?: Array<number>;
}


/**
 * Serializer for refund request lines.
 * @export
 * @interface RequestLineRequest
 */
export interface RequestLineRequest {
    /**
     * The amount refunded for this line item (may not be the full amount charged).
     * @type {string}
     * @memberof RequestLineRequest
     */
    'refunded_amount'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RequestLineRequest
     */
    'refund_request': number;
    /**
     * The individual line item to refund.
     * @type {number}
     * @memberof RequestLineRequest
     */
    'line': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof RequestLineRequest
     */
    'transactions'?: Array<number>;
}
/**
 * Serializer for refund requests.
 * @export
 * @interface RequestRequest
 */
export interface RequestRequest {
    /**
     * 
     * @type {Array<RequestLineRequest>}
     * @memberof RequestRequest
     */
    'lines': Array<RequestLineRequest>;
    /**
     * 
     * @type {OrderRequest}
     * @memberof RequestRequest
     */
    'order': OrderRequest;
    /**
     * 
     * @type {string}
     * @memberof RequestRequest
     */
    'zendesk_ticket'?: string;
    /**
     * Reason for refund, supplied by the processing user.
     * @type {string}
     * @memberof RequestRequest
     */
    'refund_reason'?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestRequest
     */
    'requester': number;
}
/**
 * Simpler serializer for discounts.
 * @export
 * @interface SimpleDiscount
 */
export interface SimpleDiscount {
    /**
     * 
     * @type {number}
     * @memberof SimpleDiscount
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SimpleDiscount
     */
    'discount_code': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleDiscount
     */
    'amount': string;
    /**
     * 
     * @type {DiscountTypeEnum}
     * @memberof SimpleDiscount
     */
    'discount_type': DiscountTypeEnum;
    /**
     * Return the formatted discount amount.  This quantizes percent discounts to whole numbers. This is probably fine.
     * @type {string}
     * @memberof SimpleDiscount
     */
    'formatted_discount_amount': string;
}


/**
 * * `pending` - Pending * `fulfilled` - Fulfilled * `canceled` - Canceled * `refunded` - Refunded * `declined` - Declined * `errored` - Errored * `review` - Review
 * @export
 * @enum {string}
 */

export const StateEnum = {
    /**
    * Pending
    */
    Pending: 'pending',
    /**
    * Fulfilled
    */
    Fulfilled: 'fulfilled',
    /**
    * Canceled
    */
    Canceled: 'canceled',
    /**
    * Refunded
    */
    Refunded: 'refunded',
    /**
    * Declined
    */
    Declined: 'declined',
    /**
    * Errored
    */
    Errored: 'errored',
    /**
    * Review
    */
    Review: 'review'
} as const;

export type StateEnum = typeof StateEnum[keyof typeof StateEnum];


/**
 * * `pending` - pending * `created` - created * `denied` - denied * `approved` - approved * `approved-complete` - approved-complete * `failed` - failed
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    /**
    * pending
    */
    Pending: 'pending',
    /**
    * created
    */
    Created: 'created',
    /**
    * denied
    */
    Denied: 'denied',
    /**
    * approved
    */
    Approved: 'approved',
    /**
    * approved-complete
    */
    ApprovedComplete: 'approved-complete',
    /**
    * failed
    */
    Failed: 'failed'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * TaxRate model serializer
 * @export
 * @interface TaxRate
 */
export interface TaxRate {
    /**
     * 
     * @type {number}
     * @memberof TaxRate
     */
    'id': number;
    /**
     * 
     * @type {CountryCodeEnum}
     * @memberof TaxRate
     */
    'country_code': CountryCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'tax_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'tax_rate_name'?: string;
}


/**
 * Serializer for transactions.
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transaction_id': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transaction_type': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'updated_on': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'reason': string;
    /**
     * 
     * @type {any}
     * @memberof Transaction
     */
    'data': any;
    /**
     * 
     * @type {TransactionOrder}
     * @memberof Transaction
     */
    'order': TransactionOrder;
}
/**
 * Serializes a transaction\'s purchaser data.
 * @export
 * @interface TransactionDataPurchaser
 */
export interface TransactionDataPurchaser {
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'email': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionDataPurchaser
     */
    'street_address': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'state_or_territory': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'postal_code': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDataPurchaser
     */
    'company': string;
}
/**
 * 
 * @export
 * @interface TransactionOrder
 */
export interface TransactionOrder {
    /**
     * 
     * @type {number}
     * @memberof TransactionOrder
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TransactionOrder
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionOrder
     */
    'reference_number': string;
}
/**
 * Serializer for transactions.
 * @export
 * @interface TransactionRequest
 */
export interface TransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof TransactionRequest
     */
    'transaction_id': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionRequest
     */
    'transaction_type': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionRequest
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionRequest
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionRequest
     */
    'updated_on': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionRequest
     */
    'reason': string;
    /**
     * 
     * @type {any}
     * @memberof TransactionRequest
     */
    'data': any;
}
/**
 * Serializer for User model.
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * The SSO ID (usually a Keycloak UUID) for the user.
     * @type {string}
     * @memberof User
     */
    'global_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * Return the email.
     * @type {string}
     * @memberof User
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
}
/**
 * Serializer for User model.
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * The SSO ID (usually a Keycloak UUID) for the user.
     * @type {string}
     * @memberof UserRequest
     */
    'global_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'name'?: string;
}

/**
 * CommerceApi - axios parameter creator
 * @export
 */
export const CommerceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemRequest} IntegratedSystemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemCreate: async (IntegratedSystemRequest: IntegratedSystemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'IntegratedSystemRequest' is not null or undefined
            assertParamExists('commerceApiV0MetaIntegratedSystemCreate', 'IntegratedSystemRequest', IntegratedSystemRequest)
            const localVarPath = `/commerce/api/v0/meta/integrated_system/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IntegratedSystemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaIntegratedSystemDestroy', 'id', id)
            const localVarPath = `/commerce/api/v0/meta/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/meta/integrated_system/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {PatchedIntegratedSystemRequest} [PatchedIntegratedSystemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemPartialUpdate: async (id: number, PatchedIntegratedSystemRequest?: PatchedIntegratedSystemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaIntegratedSystemPartialUpdate', 'id', id)
            const localVarPath = `/commerce/api/v0/meta/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedIntegratedSystemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaIntegratedSystemRetrieve', 'id', id)
            const localVarPath = `/commerce/api/v0/meta/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {IntegratedSystemRequest} IntegratedSystemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemUpdate: async (id: number, IntegratedSystemRequest: IntegratedSystemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaIntegratedSystemUpdate', 'id', id)
            // verify required parameter 'IntegratedSystemRequest' is not null or undefined
            assertParamExists('commerceApiV0MetaIntegratedSystemUpdate', 'IntegratedSystemRequest', IntegratedSystemRequest)
            const localVarPath = `/commerce/api/v0/meta/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IntegratedSystemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {ProductRequest} ProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductCreate: async (ProductRequest: ProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ProductRequest' is not null or undefined
            assertParamExists('commerceApiV0MetaProductCreate', 'ProductRequest', ProductRequest)
            const localVarPath = `/commerce/api/v0/meta/product/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaProductDestroy', 'id', id)
            const localVarPath = `/commerce/api/v0/meta/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [name] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sku] 
         * @param {string} [system__slug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductList: async (limit?: number, name?: string, offset?: number, sku?: string, system__slug?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/meta/product/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }

            if (system__slug !== undefined) {
                localVarQueryParameter['system__slug'] = system__slug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {PatchedProductRequest} [PatchedProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductPartialUpdate: async (id: number, PatchedProductRequest?: PatchedProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaProductPartialUpdate', 'id', id)
            const localVarPath = `/commerce/api/v0/meta/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pre-loads the product metadata for a given SKU, even if the SKU doesn\'t exist yet.
         * @param {string} sku 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductPreloadRetrieve: async (sku: string, system_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('commerceApiV0MetaProductPreloadRetrieve', 'sku', sku)
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('commerceApiV0MetaProductPreloadRetrieve', 'system_slug', system_slug)
            const localVarPath = `/commerce/api/v0/meta/product/preload/{system_slug}/{sku}/`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaProductRetrieve', 'id', id)
            const localVarPath = `/commerce/api/v0/meta/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {ProductRequest} ProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductUpdate: async (id: number, ProductRequest: ProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0MetaProductUpdate', 'id', id)
            // verify required parameter 'ProductRequest' is not null or undefined
            assertParamExists('commerceApiV0MetaProductUpdate', 'ProductRequest', ProductRequest)
            const localVarPath = `/commerce/api/v0/meta/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {BasketItemRequest} BasketItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsCreate: async (BasketItemRequest: BasketItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BasketItemRequest' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketitemsCreate', 'BasketItemRequest', BasketItemRequest)
            const localVarPath = `/commerce/api/v0/payments/basketitems/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(BasketItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketitemsDestroy', 'id', id)
            const localVarPath = `/commerce/api/v0/payments/basketitems/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the basket items for the current user.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/payments/basketitems/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {PatchedBasketItemRequest} [PatchedBasketItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsPartialUpdate: async (id: number, PatchedBasketItemRequest?: PatchedBasketItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketitemsPartialUpdate', 'id', id)
            const localVarPath = `/commerce/api/v0/payments/basketitems/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedBasketItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the basket items for the current user.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketitemsRetrieve', 'id', id)
            const localVarPath = `/commerce/api/v0/payments/basketitems/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {BasketItemRequest} BasketItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsUpdate: async (id: number, BasketItemRequest: BasketItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketitemsUpdate', 'id', id)
            // verify required parameter 'BasketItemRequest' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketitemsUpdate', 'BasketItemRequest', BasketItemRequest)
            const localVarPath = `/commerce/api/v0/payments/basketitems/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(BasketItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or updates a basket for the current user, adding the discount if valid.
         * @param {string} discount_code 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsAddDiscountCreate: async (discount_code: string, system_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discount_code' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsAddDiscountCreate', 'discount_code', discount_code)
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsAddDiscountCreate', 'system_slug', system_slug)
            const localVarPath = `/commerce/api/v0/payments/baskets/add_discount/{system_slug}/`
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (discount_code !== undefined) {
                localVarQueryParameter['discount_code'] = discount_code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clears the basket for the current user.
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsClearDestroy: async (system_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsClearDestroy', 'system_slug', system_slug)
            const localVarPath = `/commerce/api/v0/payments/baskets/clear/{system_slug}/`
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product.
         * @param {string} sku 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsCreateFromProductCreate: async (sku: string, system_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsCreateFromProductCreate', 'sku', sku)
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsCreateFromProductCreate', 'system_slug', system_slug)
            const localVarPath = `/commerce/api/v0/payments/baskets/create_from_product/{system_slug}/{sku}/`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product.
         * @param {CreateBasketWithProductsRequest} CreateBasketWithProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsCreateWithProductsCreate: async (CreateBasketWithProductsRequest: CreateBasketWithProductsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CreateBasketWithProductsRequest' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsCreateWithProductsCreate', 'CreateBasketWithProductsRequest', CreateBasketWithProductsRequest)
            const localVarPath = `/commerce/api/v0/payments/baskets/create_with_products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateBasketWithProductsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns or creates a basket for the current user and system.
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsForSystemRetrieve: async (system_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsForSystemRetrieve', 'system_slug', system_slug)
            const localVarPath = `/commerce/api/v0/payments/baskets/for_system/{system_slug}/`
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrives the current user\'s baskets, one per system.
         * @param {number} [integrated_system] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsList: async (integrated_system?: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/payments/baskets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (integrated_system !== undefined) {
                localVarQueryParameter['integrated_system'] = integrated_system;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a basket for the current user.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0PaymentsBasketsRetrieve', 'id', id)
            const localVarPath = `/commerce/api/v0/payments/baskets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates and returns the form payload for the current basket for the specified system, which can be used to start the checkout process.
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsCheckoutCreate: async (system_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('commerceApiV0PaymentsCheckoutCreate', 'system_slug', system_slug)
            const localVarPath = `/commerce/api/v0/payments/checkout/{system_slug}/`
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a discount.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsDiscountsCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/payments/discounts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrives the current user\'s completed orders.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsOrdersHistoryList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/payments/orders/history/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a completed order for the current user.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsOrdersHistoryRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0PaymentsOrdersHistoryRetrieve', 'id', id)
            const localVarPath = `/commerce/api/v0/payments/orders/history/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a refund from an existing order, optionally specifying which lines to refund.
         * @param {CreateFromOrderApiRequest} CreateFromOrderApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsCreateFromOrderCreate: async (CreateFromOrderApiRequest: CreateFromOrderApiRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CreateFromOrderApiRequest' is not null or undefined
            assertParamExists('commerceApiV0RefundsCreateFromOrderCreate', 'CreateFromOrderApiRequest', CreateFromOrderApiRequest)
            const localVarPath = `/commerce/api/v0/refunds/create_from_order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateFromOrderApiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for line items.
         * @param {RequestLineRequest} RequestLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesCreate: async (RequestLineRequest: RequestLineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'RequestLineRequest' is not null or undefined
            assertParamExists('commerceApiV0RefundsLinesCreate', 'RequestLineRequest', RequestLineRequest)
            const localVarPath = `/commerce/api/v0/refunds/lines/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(RequestLineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsLinesDestroy', 'id', id)
            const localVarPath = `/commerce/api/v0/refunds/lines/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for line items.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/refunds/lines/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {PatchedRequestLineRequest} [PatchedRequestLineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesPartialUpdate: async (id: number, PatchedRequestLineRequest?: PatchedRequestLineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsLinesPartialUpdate', 'id', id)
            const localVarPath = `/commerce/api/v0/refunds/lines/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedRequestLineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsLinesRetrieve', 'id', id)
            const localVarPath = `/commerce/api/v0/refunds/lines/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {RequestLineRequest} RequestLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesUpdate: async (id: number, RequestLineRequest: RequestLineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsLinesUpdate', 'id', id)
            // verify required parameter 'RequestLineRequest' is not null or undefined
            assertParamExists('commerceApiV0RefundsLinesUpdate', 'RequestLineRequest', RequestLineRequest)
            const localVarPath = `/commerce/api/v0/refunds/lines/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(RequestLineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for refund requests.
         * @param {RequestRequest} RequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsCreate: async (RequestRequest: RequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'RequestRequest' is not null or undefined
            assertParamExists('commerceApiV0RefundsRequestsCreate', 'RequestRequest', RequestRequest)
            const localVarPath = `/commerce/api/v0/refunds/requests/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(RequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsRequestsDestroy', 'id', id)
            const localVarPath = `/commerce/api/v0/refunds/requests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for refund requests.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/refunds/requests/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {PatchedRequestRequest} [PatchedRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsPartialUpdate: async (id: number, PatchedRequestRequest?: PatchedRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsRequestsPartialUpdate', 'id', id)
            const localVarPath = `/commerce/api/v0/refunds/requests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsRequestsRetrieve', 'id', id)
            const localVarPath = `/commerce/api/v0/refunds/requests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {RequestRequest} RequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsUpdate: async (id: number, RequestRequest: RequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commerceApiV0RefundsRequestsUpdate', 'id', id)
            // verify required parameter 'RequestRequest' is not null or undefined
            assertParamExists('commerceApiV0RefundsRequestsUpdate', 'RequestRequest', RequestRequest)
            const localVarPath = `/commerce/api/v0/refunds/requests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(RequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0UsersMeRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/api/v0/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product and discount.
         * @param {string} discount_code 
         * @param {string} sku 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasketFromProductWithDiscount: async (discount_code: string, sku: string, system_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discount_code' is not null or undefined
            assertParamExists('createBasketFromProductWithDiscount', 'discount_code', discount_code)
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('createBasketFromProductWithDiscount', 'sku', sku)
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('createBasketFromProductWithDiscount', 'system_slug', system_slug)
            const localVarPath = `/commerce/api/v0/payments/baskets/create_from_product/{system_slug}/{sku}/{discount_code}/`
                .replace(`{${"discount_code"}}`, encodeURIComponent(String(discount_code)))
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommerceApi - functional programming interface
 * @export
 */
export const CommerceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommerceApiAxiosParamCreator(configuration)
    return {
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemRequest} IntegratedSystemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaIntegratedSystemCreate(IntegratedSystemRequest: IntegratedSystemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaIntegratedSystemCreate(IntegratedSystemRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaIntegratedSystemCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaIntegratedSystemDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaIntegratedSystemDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaIntegratedSystemDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaIntegratedSystemList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedIntegratedSystemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaIntegratedSystemList(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaIntegratedSystemList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {PatchedIntegratedSystemRequest} [PatchedIntegratedSystemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaIntegratedSystemPartialUpdate(id: number, PatchedIntegratedSystemRequest?: PatchedIntegratedSystemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaIntegratedSystemPartialUpdate(id, PatchedIntegratedSystemRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaIntegratedSystemPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaIntegratedSystemRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaIntegratedSystemRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaIntegratedSystemRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {IntegratedSystemRequest} IntegratedSystemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaIntegratedSystemUpdate(id: number, IntegratedSystemRequest: IntegratedSystemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaIntegratedSystemUpdate(id, IntegratedSystemRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaIntegratedSystemUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for Product model.
         * @param {ProductRequest} ProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaProductCreate(ProductRequest: ProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaProductCreate(ProductRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaProductCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaProductDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaProductDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaProductDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for Product model.
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [name] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sku] 
         * @param {string} [system__slug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaProductList(limit?: number, name?: string, offset?: number, sku?: string, system__slug?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProductList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaProductList(limit, name, offset, sku, system__slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaProductList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {PatchedProductRequest} [PatchedProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaProductPartialUpdate(id: number, PatchedProductRequest?: PatchedProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaProductPartialUpdate(id, PatchedProductRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaProductPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Pre-loads the product metadata for a given SKU, even if the SKU doesn\'t exist yet.
         * @param {string} sku 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaProductPreloadRetrieve(sku: string, system_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaProductPreloadRetrieve(sku, system_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaProductPreloadRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaProductRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaProductRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaProductRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {ProductRequest} ProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0MetaProductUpdate(id: number, ProductRequest: ProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0MetaProductUpdate(id, ProductRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0MetaProductUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {BasketItemRequest} BasketItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketitemsCreate(BasketItemRequest: BasketItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketitemsCreate(BasketItemRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketitemsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketitemsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketitemsDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketitemsDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns the basket items for the current user.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketitemsList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBasketItemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketitemsList(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketitemsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {PatchedBasketItemRequest} [PatchedBasketItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketitemsPartialUpdate(id: number, PatchedBasketItemRequest?: PatchedBasketItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketitemsPartialUpdate(id, PatchedBasketItemRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketitemsPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns the basket items for the current user.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketitemsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketitemsRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketitemsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {number} id A unique integer value identifying this basket item.
         * @param {BasketItemRequest} BasketItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketitemsUpdate(id: number, BasketItemRequest: BasketItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketitemsUpdate(id, BasketItemRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketitemsUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Creates or updates a basket for the current user, adding the discount if valid.
         * @param {string} discount_code 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketsAddDiscountCreate(discount_code: string, system_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketsAddDiscountCreate(discount_code, system_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketsAddDiscountCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Clears the basket for the current user.
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketsClearDestroy(system_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketsClearDestroy(system_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketsClearDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product.
         * @param {string} sku 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketsCreateFromProductCreate(sku: string, system_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketsCreateFromProductCreate(sku, system_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketsCreateFromProductCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product.
         * @param {CreateBasketWithProductsRequest} CreateBasketWithProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketsCreateWithProductsCreate(CreateBasketWithProductsRequest: CreateBasketWithProductsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketsCreateWithProductsCreate(CreateBasketWithProductsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketsCreateWithProductsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns or creates a basket for the current user and system.
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketsForSystemRetrieve(system_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketsForSystemRetrieve(system_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketsForSystemRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrives the current user\'s baskets, one per system.
         * @param {number} [integrated_system] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketsList(integrated_system?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBasketWithProductList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketsList(integrated_system, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a basket for the current user.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsBasketsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsBasketsRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsBasketsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Generates and returns the form payload for the current basket for the specified system, which can be used to start the checkout process.
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsCheckoutCreate(system_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CyberSourceCheckout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsCheckoutCreate(system_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsCheckoutCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a discount.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsDiscountsCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Discount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsDiscountsCreate(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsDiscountsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrives the current user\'s completed orders.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsOrdersHistoryList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOrderHistoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsOrdersHistoryList(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsOrdersHistoryList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a completed order for the current user.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0PaymentsOrdersHistoryRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0PaymentsOrdersHistoryRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0PaymentsOrdersHistoryRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a refund from an existing order, optionally specifying which lines to refund.
         * @param {CreateFromOrderApiRequest} CreateFromOrderApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsCreateFromOrderCreate(CreateFromOrderApiRequest: CreateFromOrderApiRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsCreateFromOrderCreate(CreateFromOrderApiRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsCreateFromOrderCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for line items.
         * @param {RequestLineRequest} RequestLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsLinesCreate(RequestLineRequest: RequestLineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsLinesCreate(RequestLineRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsLinesCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsLinesDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsLinesDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsLinesDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for line items.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsLinesList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRequestLineList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsLinesList(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsLinesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {PatchedRequestLineRequest} [PatchedRequestLineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsLinesPartialUpdate(id: number, PatchedRequestLineRequest?: PatchedRequestLineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsLinesPartialUpdate(id, PatchedRequestLineRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsLinesPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsLinesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsLinesRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsLinesRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for line items.
         * @param {number} id A unique integer value identifying this request line.
         * @param {RequestLineRequest} RequestLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsLinesUpdate(id: number, RequestLineRequest: RequestLineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsLinesUpdate(id, RequestLineRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsLinesUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for refund requests.
         * @param {RequestRequest} RequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsRequestsCreate(RequestRequest: RequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsRequestsCreate(RequestRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsRequestsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsRequestsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsRequestsDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsRequestsDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for refund requests.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsRequestsList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRequestList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsRequestsList(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsRequestsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {PatchedRequestRequest} [PatchedRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsRequestsPartialUpdate(id: number, PatchedRequestRequest?: PatchedRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsRequestsPartialUpdate(id, PatchedRequestRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsRequestsPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsRequestsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsRequestsRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsRequestsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API endpoint for refund requests.
         * @param {number} id A unique integer value identifying this request line.
         * @param {RequestRequest} RequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0RefundsRequestsUpdate(id: number, RequestRequest: RequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0RefundsRequestsUpdate(id, RequestRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0RefundsRequestsUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceApiV0UsersMeRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceApiV0UsersMeRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceApiV0UsersMeRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product and discount.
         * @param {string} discount_code 
         * @param {string} sku 
         * @param {string} system_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBasketFromProductWithDiscount(discount_code: string, sku: string, system_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBasketFromProductWithDiscount(discount_code, sku, system_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.createBasketFromProductWithDiscount']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CommerceApi - factory interface
 * @export
 */
export const CommerceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommerceApiFp(configuration)
    return {
        /**
         * Viewset for IntegratedSystem model.
         * @param {CommerceApiCommerceApiV0MetaIntegratedSystemCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemCreate(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.commerceApiV0MetaIntegratedSystemCreate(requestParameters.IntegratedSystemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {CommerceApiCommerceApiV0MetaIntegratedSystemDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemDestroy(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commerceApiV0MetaIntegratedSystemDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {CommerceApiCommerceApiV0MetaIntegratedSystemListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemList(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedIntegratedSystemList> {
            return localVarFp.commerceApiV0MetaIntegratedSystemList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemPartialUpdate(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.commerceApiV0MetaIntegratedSystemPartialUpdate(requestParameters.id, requestParameters.PatchedIntegratedSystemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {CommerceApiCommerceApiV0MetaIntegratedSystemRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemRetrieve(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.commerceApiV0MetaIntegratedSystemRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {CommerceApiCommerceApiV0MetaIntegratedSystemUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaIntegratedSystemUpdate(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.commerceApiV0MetaIntegratedSystemUpdate(requestParameters.id, requestParameters.IntegratedSystemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {CommerceApiCommerceApiV0MetaProductCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductCreate(requestParameters: CommerceApiCommerceApiV0MetaProductCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.commerceApiV0MetaProductCreate(requestParameters.ProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {CommerceApiCommerceApiV0MetaProductDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductDestroy(requestParameters: CommerceApiCommerceApiV0MetaProductDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commerceApiV0MetaProductDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {CommerceApiCommerceApiV0MetaProductListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductList(requestParameters: CommerceApiCommerceApiV0MetaProductListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedProductList> {
            return localVarFp.commerceApiV0MetaProductList(requestParameters.limit, requestParameters.name, requestParameters.offset, requestParameters.sku, requestParameters.system__slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {CommerceApiCommerceApiV0MetaProductPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductPartialUpdate(requestParameters: CommerceApiCommerceApiV0MetaProductPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.commerceApiV0MetaProductPartialUpdate(requestParameters.id, requestParameters.PatchedProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Pre-loads the product metadata for a given SKU, even if the SKU doesn\'t exist yet.
         * @param {CommerceApiCommerceApiV0MetaProductPreloadRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductPreloadRetrieve(requestParameters: CommerceApiCommerceApiV0MetaProductPreloadRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.commerceApiV0MetaProductPreloadRetrieve(requestParameters.sku, requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {CommerceApiCommerceApiV0MetaProductRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductRetrieve(requestParameters: CommerceApiCommerceApiV0MetaProductRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.commerceApiV0MetaProductRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {CommerceApiCommerceApiV0MetaProductUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0MetaProductUpdate(requestParameters: CommerceApiCommerceApiV0MetaProductUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.commerceApiV0MetaProductUpdate(requestParameters.id, requestParameters.ProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {CommerceApiCommerceApiV0PaymentsBasketitemsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketItem> {
            return localVarFp.commerceApiV0PaymentsBasketitemsCreate(requestParameters.BasketItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {CommerceApiCommerceApiV0PaymentsBasketitemsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsDestroy(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commerceApiV0PaymentsBasketitemsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the basket items for the current user.
         * @param {CommerceApiCommerceApiV0PaymentsBasketitemsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsList(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBasketItemList> {
            return localVarFp.commerceApiV0PaymentsBasketitemsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsPartialUpdate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketItem> {
            return localVarFp.commerceApiV0PaymentsBasketitemsPartialUpdate(requestParameters.id, requestParameters.PatchedBasketItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the basket items for the current user.
         * @param {CommerceApiCommerceApiV0PaymentsBasketitemsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketItem> {
            return localVarFp.commerceApiV0PaymentsBasketitemsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for handling BasketItem operations.
         * @param {CommerceApiCommerceApiV0PaymentsBasketitemsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketitemsUpdate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketItem> {
            return localVarFp.commerceApiV0PaymentsBasketitemsUpdate(requestParameters.id, requestParameters.BasketItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates or updates a basket for the current user, adding the discount if valid.
         * @param {CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsAddDiscountCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketWithProduct> {
            return localVarFp.commerceApiV0PaymentsBasketsAddDiscountCreate(requestParameters.discount_code, requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Clears the basket for the current user.
         * @param {CommerceApiCommerceApiV0PaymentsBasketsClearDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsClearDestroy(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsClearDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commerceApiV0PaymentsBasketsClearDestroy(requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product.
         * @param {CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsCreateFromProductCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketWithProduct> {
            return localVarFp.commerceApiV0PaymentsBasketsCreateFromProductCreate(requestParameters.sku, requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product.
         * @param {CommerceApiCommerceApiV0PaymentsBasketsCreateWithProductsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsCreateWithProductsCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsCreateWithProductsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketWithProduct> {
            return localVarFp.commerceApiV0PaymentsBasketsCreateWithProductsCreate(requestParameters.CreateBasketWithProductsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns or creates a basket for the current user and system.
         * @param {CommerceApiCommerceApiV0PaymentsBasketsForSystemRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsForSystemRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsForSystemRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketWithProduct> {
            return localVarFp.commerceApiV0PaymentsBasketsForSystemRetrieve(requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrives the current user\'s baskets, one per system.
         * @param {CommerceApiCommerceApiV0PaymentsBasketsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsList(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBasketWithProductList> {
            return localVarFp.commerceApiV0PaymentsBasketsList(requestParameters.integrated_system, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a basket for the current user.
         * @param {CommerceApiCommerceApiV0PaymentsBasketsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsBasketsRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketWithProduct> {
            return localVarFp.commerceApiV0PaymentsBasketsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates and returns the form payload for the current basket for the specified system, which can be used to start the checkout process.
         * @param {CommerceApiCommerceApiV0PaymentsCheckoutCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsCheckoutCreate(requestParameters: CommerceApiCommerceApiV0PaymentsCheckoutCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CyberSourceCheckout> {
            return localVarFp.commerceApiV0PaymentsCheckoutCreate(requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a discount.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsDiscountsCreate(options?: RawAxiosRequestConfig): AxiosPromise<Discount> {
            return localVarFp.commerceApiV0PaymentsDiscountsCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrives the current user\'s completed orders.
         * @param {CommerceApiCommerceApiV0PaymentsOrdersHistoryListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsOrdersHistoryList(requestParameters: CommerceApiCommerceApiV0PaymentsOrdersHistoryListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedOrderHistoryList> {
            return localVarFp.commerceApiV0PaymentsOrdersHistoryList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a completed order for the current user.
         * @param {CommerceApiCommerceApiV0PaymentsOrdersHistoryRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0PaymentsOrdersHistoryRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsOrdersHistoryRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderHistory> {
            return localVarFp.commerceApiV0PaymentsOrdersHistoryRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a refund from an existing order, optionally specifying which lines to refund.
         * @param {CommerceApiCommerceApiV0RefundsCreateFromOrderCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsCreateFromOrderCreate(requestParameters: CommerceApiCommerceApiV0RefundsCreateFromOrderCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Request> {
            return localVarFp.commerceApiV0RefundsCreateFromOrderCreate(requestParameters.CreateFromOrderApiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for line items.
         * @param {CommerceApiCommerceApiV0RefundsLinesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesCreate(requestParameters: CommerceApiCommerceApiV0RefundsLinesCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RequestLine> {
            return localVarFp.commerceApiV0RefundsLinesCreate(requestParameters.RequestLineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for line items.
         * @param {CommerceApiCommerceApiV0RefundsLinesDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesDestroy(requestParameters: CommerceApiCommerceApiV0RefundsLinesDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commerceApiV0RefundsLinesDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for line items.
         * @param {CommerceApiCommerceApiV0RefundsLinesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesList(requestParameters: CommerceApiCommerceApiV0RefundsLinesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedRequestLineList> {
            return localVarFp.commerceApiV0RefundsLinesList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for line items.
         * @param {CommerceApiCommerceApiV0RefundsLinesPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesPartialUpdate(requestParameters: CommerceApiCommerceApiV0RefundsLinesPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RequestLine> {
            return localVarFp.commerceApiV0RefundsLinesPartialUpdate(requestParameters.id, requestParameters.PatchedRequestLineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for line items.
         * @param {CommerceApiCommerceApiV0RefundsLinesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesRetrieve(requestParameters: CommerceApiCommerceApiV0RefundsLinesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<RequestLine> {
            return localVarFp.commerceApiV0RefundsLinesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for line items.
         * @param {CommerceApiCommerceApiV0RefundsLinesUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsLinesUpdate(requestParameters: CommerceApiCommerceApiV0RefundsLinesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RequestLine> {
            return localVarFp.commerceApiV0RefundsLinesUpdate(requestParameters.id, requestParameters.RequestLineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for refund requests.
         * @param {CommerceApiCommerceApiV0RefundsRequestsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsCreate(requestParameters: CommerceApiCommerceApiV0RefundsRequestsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Request> {
            return localVarFp.commerceApiV0RefundsRequestsCreate(requestParameters.RequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for refund requests.
         * @param {CommerceApiCommerceApiV0RefundsRequestsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsDestroy(requestParameters: CommerceApiCommerceApiV0RefundsRequestsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commerceApiV0RefundsRequestsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for refund requests.
         * @param {CommerceApiCommerceApiV0RefundsRequestsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsList(requestParameters: CommerceApiCommerceApiV0RefundsRequestsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedRequestList> {
            return localVarFp.commerceApiV0RefundsRequestsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for refund requests.
         * @param {CommerceApiCommerceApiV0RefundsRequestsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsPartialUpdate(requestParameters: CommerceApiCommerceApiV0RefundsRequestsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Request> {
            return localVarFp.commerceApiV0RefundsRequestsPartialUpdate(requestParameters.id, requestParameters.PatchedRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for refund requests.
         * @param {CommerceApiCommerceApiV0RefundsRequestsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsRetrieve(requestParameters: CommerceApiCommerceApiV0RefundsRequestsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Request> {
            return localVarFp.commerceApiV0RefundsRequestsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint for refund requests.
         * @param {CommerceApiCommerceApiV0RefundsRequestsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0RefundsRequestsUpdate(requestParameters: CommerceApiCommerceApiV0RefundsRequestsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Request> {
            return localVarFp.commerceApiV0RefundsRequestsUpdate(requestParameters.id, requestParameters.RequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceApiV0UsersMeRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.commerceApiV0UsersMeRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates or updates a basket for the current user, adding the selected product and discount.
         * @param {CommerceApiCreateBasketFromProductWithDiscountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasketFromProductWithDiscount(requestParameters: CommerceApiCreateBasketFromProductWithDiscountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasketWithProduct> {
            return localVarFp.createBasketFromProductWithDiscount(requestParameters.discount_code, requestParameters.sku, requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for commerceApiV0MetaIntegratedSystemCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaIntegratedSystemCreateRequest
 */
export interface CommerceApiCommerceApiV0MetaIntegratedSystemCreateRequest {
    /**
     * 
     * @type {IntegratedSystemRequest}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemCreate
     */
    readonly IntegratedSystemRequest: IntegratedSystemRequest
}

/**
 * Request parameters for commerceApiV0MetaIntegratedSystemDestroy operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaIntegratedSystemDestroyRequest
 */
export interface CommerceApiCommerceApiV0MetaIntegratedSystemDestroyRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemDestroy
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0MetaIntegratedSystemList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaIntegratedSystemListRequest
 */
export interface CommerceApiCommerceApiV0MetaIntegratedSystemListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemList
     */
    readonly offset?: number
}

/**
 * Request parameters for commerceApiV0MetaIntegratedSystemPartialUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdateRequest
 */
export interface CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdateRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedIntegratedSystemRequest}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdate
     */
    readonly PatchedIntegratedSystemRequest?: PatchedIntegratedSystemRequest
}

/**
 * Request parameters for commerceApiV0MetaIntegratedSystemRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaIntegratedSystemRetrieveRequest
 */
export interface CommerceApiCommerceApiV0MetaIntegratedSystemRetrieveRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0MetaIntegratedSystemUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaIntegratedSystemUpdateRequest
 */
export interface CommerceApiCommerceApiV0MetaIntegratedSystemUpdateRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemUpdate
     */
    readonly id: number

    /**
     * 
     * @type {IntegratedSystemRequest}
     * @memberof CommerceApiCommerceApiV0MetaIntegratedSystemUpdate
     */
    readonly IntegratedSystemRequest: IntegratedSystemRequest
}

/**
 * Request parameters for commerceApiV0MetaProductCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaProductCreateRequest
 */
export interface CommerceApiCommerceApiV0MetaProductCreateRequest {
    /**
     * 
     * @type {ProductRequest}
     * @memberof CommerceApiCommerceApiV0MetaProductCreate
     */
    readonly ProductRequest: ProductRequest
}

/**
 * Request parameters for commerceApiV0MetaProductDestroy operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaProductDestroyRequest
 */
export interface CommerceApiCommerceApiV0MetaProductDestroyRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaProductDestroy
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0MetaProductList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaProductListRequest
 */
export interface CommerceApiCommerceApiV0MetaProductListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaProductList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0MetaProductList
     */
    readonly name?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaProductList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0MetaProductList
     */
    readonly sku?: string

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0MetaProductList
     */
    readonly system__slug?: string
}

/**
 * Request parameters for commerceApiV0MetaProductPartialUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaProductPartialUpdateRequest
 */
export interface CommerceApiCommerceApiV0MetaProductPartialUpdateRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaProductPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedProductRequest}
     * @memberof CommerceApiCommerceApiV0MetaProductPartialUpdate
     */
    readonly PatchedProductRequest?: PatchedProductRequest
}

/**
 * Request parameters for commerceApiV0MetaProductPreloadRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaProductPreloadRetrieveRequest
 */
export interface CommerceApiCommerceApiV0MetaProductPreloadRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0MetaProductPreloadRetrieve
     */
    readonly sku: string

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0MetaProductPreloadRetrieve
     */
    readonly system_slug: string
}

/**
 * Request parameters for commerceApiV0MetaProductRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaProductRetrieveRequest
 */
export interface CommerceApiCommerceApiV0MetaProductRetrieveRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaProductRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0MetaProductUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0MetaProductUpdateRequest
 */
export interface CommerceApiCommerceApiV0MetaProductUpdateRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0MetaProductUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ProductRequest}
     * @memberof CommerceApiCommerceApiV0MetaProductUpdate
     */
    readonly ProductRequest: ProductRequest
}

/**
 * Request parameters for commerceApiV0PaymentsBasketitemsCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketitemsCreateRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketitemsCreateRequest {
    /**
     * 
     * @type {BasketItemRequest}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsCreate
     */
    readonly BasketItemRequest: BasketItemRequest
}

/**
 * Request parameters for commerceApiV0PaymentsBasketitemsDestroy operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketitemsDestroyRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketitemsDestroyRequest {
    /**
     * A unique integer value identifying this basket item.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0PaymentsBasketitemsList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketitemsListRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketitemsListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsList
     */
    readonly offset?: number
}

/**
 * Request parameters for commerceApiV0PaymentsBasketitemsPartialUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdateRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdateRequest {
    /**
     * A unique integer value identifying this basket item.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedBasketItemRequest}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdate
     */
    readonly PatchedBasketItemRequest?: PatchedBasketItemRequest
}

/**
 * Request parameters for commerceApiV0PaymentsBasketitemsRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketitemsRetrieveRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketitemsRetrieveRequest {
    /**
     * A unique integer value identifying this basket item.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0PaymentsBasketitemsUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketitemsUpdateRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketitemsUpdateRequest {
    /**
     * A unique integer value identifying this basket item.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {BasketItemRequest}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketitemsUpdate
     */
    readonly BasketItemRequest: BasketItemRequest
}

/**
 * Request parameters for commerceApiV0PaymentsBasketsAddDiscountCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreateRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreate
     */
    readonly discount_code: string

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreate
     */
    readonly system_slug: string
}

/**
 * Request parameters for commerceApiV0PaymentsBasketsClearDestroy operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketsClearDestroyRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketsClearDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsClearDestroy
     */
    readonly system_slug: string
}

/**
 * Request parameters for commerceApiV0PaymentsBasketsCreateFromProductCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreateRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreate
     */
    readonly sku: string

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreate
     */
    readonly system_slug: string
}

/**
 * Request parameters for commerceApiV0PaymentsBasketsCreateWithProductsCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketsCreateWithProductsCreateRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketsCreateWithProductsCreateRequest {
    /**
     * 
     * @type {CreateBasketWithProductsRequest}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsCreateWithProductsCreate
     */
    readonly CreateBasketWithProductsRequest: CreateBasketWithProductsRequest
}

/**
 * Request parameters for commerceApiV0PaymentsBasketsForSystemRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketsForSystemRetrieveRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketsForSystemRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsForSystemRetrieve
     */
    readonly system_slug: string
}

/**
 * Request parameters for commerceApiV0PaymentsBasketsList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketsListRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketsListRequest {
    /**
     * 
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsList
     */
    readonly integrated_system?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsList
     */
    readonly offset?: number
}

/**
 * Request parameters for commerceApiV0PaymentsBasketsRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsBasketsRetrieveRequest
 */
export interface CommerceApiCommerceApiV0PaymentsBasketsRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsBasketsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0PaymentsCheckoutCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsCheckoutCreateRequest
 */
export interface CommerceApiCommerceApiV0PaymentsCheckoutCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CommerceApiCommerceApiV0PaymentsCheckoutCreate
     */
    readonly system_slug: string
}

/**
 * Request parameters for commerceApiV0PaymentsOrdersHistoryList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsOrdersHistoryListRequest
 */
export interface CommerceApiCommerceApiV0PaymentsOrdersHistoryListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsOrdersHistoryList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsOrdersHistoryList
     */
    readonly offset?: number
}

/**
 * Request parameters for commerceApiV0PaymentsOrdersHistoryRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0PaymentsOrdersHistoryRetrieveRequest
 */
export interface CommerceApiCommerceApiV0PaymentsOrdersHistoryRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof CommerceApiCommerceApiV0PaymentsOrdersHistoryRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0RefundsCreateFromOrderCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsCreateFromOrderCreateRequest
 */
export interface CommerceApiCommerceApiV0RefundsCreateFromOrderCreateRequest {
    /**
     * 
     * @type {CreateFromOrderApiRequest}
     * @memberof CommerceApiCommerceApiV0RefundsCreateFromOrderCreate
     */
    readonly CreateFromOrderApiRequest: CreateFromOrderApiRequest
}

/**
 * Request parameters for commerceApiV0RefundsLinesCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsLinesCreateRequest
 */
export interface CommerceApiCommerceApiV0RefundsLinesCreateRequest {
    /**
     * 
     * @type {RequestLineRequest}
     * @memberof CommerceApiCommerceApiV0RefundsLinesCreate
     */
    readonly RequestLineRequest: RequestLineRequest
}

/**
 * Request parameters for commerceApiV0RefundsLinesDestroy operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsLinesDestroyRequest
 */
export interface CommerceApiCommerceApiV0RefundsLinesDestroyRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsLinesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0RefundsLinesList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsLinesListRequest
 */
export interface CommerceApiCommerceApiV0RefundsLinesListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsLinesList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsLinesList
     */
    readonly offset?: number
}

/**
 * Request parameters for commerceApiV0RefundsLinesPartialUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsLinesPartialUpdateRequest
 */
export interface CommerceApiCommerceApiV0RefundsLinesPartialUpdateRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsLinesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedRequestLineRequest}
     * @memberof CommerceApiCommerceApiV0RefundsLinesPartialUpdate
     */
    readonly PatchedRequestLineRequest?: PatchedRequestLineRequest
}

/**
 * Request parameters for commerceApiV0RefundsLinesRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsLinesRetrieveRequest
 */
export interface CommerceApiCommerceApiV0RefundsLinesRetrieveRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsLinesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0RefundsLinesUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsLinesUpdateRequest
 */
export interface CommerceApiCommerceApiV0RefundsLinesUpdateRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsLinesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RequestLineRequest}
     * @memberof CommerceApiCommerceApiV0RefundsLinesUpdate
     */
    readonly RequestLineRequest: RequestLineRequest
}

/**
 * Request parameters for commerceApiV0RefundsRequestsCreate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsRequestsCreateRequest
 */
export interface CommerceApiCommerceApiV0RefundsRequestsCreateRequest {
    /**
     * 
     * @type {RequestRequest}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsCreate
     */
    readonly RequestRequest: RequestRequest
}

/**
 * Request parameters for commerceApiV0RefundsRequestsDestroy operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsRequestsDestroyRequest
 */
export interface CommerceApiCommerceApiV0RefundsRequestsDestroyRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0RefundsRequestsList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsRequestsListRequest
 */
export interface CommerceApiCommerceApiV0RefundsRequestsListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsList
     */
    readonly offset?: number
}

/**
 * Request parameters for commerceApiV0RefundsRequestsPartialUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsRequestsPartialUpdateRequest
 */
export interface CommerceApiCommerceApiV0RefundsRequestsPartialUpdateRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedRequestRequest}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsPartialUpdate
     */
    readonly PatchedRequestRequest?: PatchedRequestRequest
}

/**
 * Request parameters for commerceApiV0RefundsRequestsRetrieve operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsRequestsRetrieveRequest
 */
export interface CommerceApiCommerceApiV0RefundsRequestsRetrieveRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for commerceApiV0RefundsRequestsUpdate operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceApiV0RefundsRequestsUpdateRequest
 */
export interface CommerceApiCommerceApiV0RefundsRequestsUpdateRequest {
    /**
     * A unique integer value identifying this request line.
     * @type {number}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RequestRequest}
     * @memberof CommerceApiCommerceApiV0RefundsRequestsUpdate
     */
    readonly RequestRequest: RequestRequest
}

/**
 * Request parameters for createBasketFromProductWithDiscount operation in CommerceApi.
 * @export
 * @interface CommerceApiCreateBasketFromProductWithDiscountRequest
 */
export interface CommerceApiCreateBasketFromProductWithDiscountRequest {
    /**
     * 
     * @type {string}
     * @memberof CommerceApiCreateBasketFromProductWithDiscount
     */
    readonly discount_code: string

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCreateBasketFromProductWithDiscount
     */
    readonly sku: string

    /**
     * 
     * @type {string}
     * @memberof CommerceApiCreateBasketFromProductWithDiscount
     */
    readonly system_slug: string
}

/**
 * CommerceApi - object-oriented interface
 * @export
 * @class CommerceApi
 * @extends {BaseAPI}
 */
export class CommerceApi extends BaseAPI {
    /**
     * Viewset for IntegratedSystem model.
     * @param {CommerceApiCommerceApiV0MetaIntegratedSystemCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaIntegratedSystemCreate(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaIntegratedSystemCreate(requestParameters.IntegratedSystemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {CommerceApiCommerceApiV0MetaIntegratedSystemDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaIntegratedSystemDestroy(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemDestroyRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaIntegratedSystemDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {CommerceApiCommerceApiV0MetaIntegratedSystemListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaIntegratedSystemList(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemListRequest = {}, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaIntegratedSystemList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaIntegratedSystemPartialUpdate(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaIntegratedSystemPartialUpdate(requestParameters.id, requestParameters.PatchedIntegratedSystemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {CommerceApiCommerceApiV0MetaIntegratedSystemRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaIntegratedSystemRetrieve(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaIntegratedSystemRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {CommerceApiCommerceApiV0MetaIntegratedSystemUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaIntegratedSystemUpdate(requestParameters: CommerceApiCommerceApiV0MetaIntegratedSystemUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaIntegratedSystemUpdate(requestParameters.id, requestParameters.IntegratedSystemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {CommerceApiCommerceApiV0MetaProductCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaProductCreate(requestParameters: CommerceApiCommerceApiV0MetaProductCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaProductCreate(requestParameters.ProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {CommerceApiCommerceApiV0MetaProductDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaProductDestroy(requestParameters: CommerceApiCommerceApiV0MetaProductDestroyRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaProductDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {CommerceApiCommerceApiV0MetaProductListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaProductList(requestParameters: CommerceApiCommerceApiV0MetaProductListRequest = {}, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaProductList(requestParameters.limit, requestParameters.name, requestParameters.offset, requestParameters.sku, requestParameters.system__slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {CommerceApiCommerceApiV0MetaProductPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaProductPartialUpdate(requestParameters: CommerceApiCommerceApiV0MetaProductPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaProductPartialUpdate(requestParameters.id, requestParameters.PatchedProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pre-loads the product metadata for a given SKU, even if the SKU doesn\'t exist yet.
     * @param {CommerceApiCommerceApiV0MetaProductPreloadRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaProductPreloadRetrieve(requestParameters: CommerceApiCommerceApiV0MetaProductPreloadRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaProductPreloadRetrieve(requestParameters.sku, requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {CommerceApiCommerceApiV0MetaProductRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaProductRetrieve(requestParameters: CommerceApiCommerceApiV0MetaProductRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaProductRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {CommerceApiCommerceApiV0MetaProductUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0MetaProductUpdate(requestParameters: CommerceApiCommerceApiV0MetaProductUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0MetaProductUpdate(requestParameters.id, requestParameters.ProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for handling BasketItem operations.
     * @param {CommerceApiCommerceApiV0PaymentsBasketitemsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketitemsCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketitemsCreate(requestParameters.BasketItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for handling BasketItem operations.
     * @param {CommerceApiCommerceApiV0PaymentsBasketitemsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketitemsDestroy(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsDestroyRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketitemsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the basket items for the current user.
     * @param {CommerceApiCommerceApiV0PaymentsBasketitemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketitemsList(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsListRequest = {}, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketitemsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for handling BasketItem operations.
     * @param {CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketitemsPartialUpdate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketitemsPartialUpdate(requestParameters.id, requestParameters.PatchedBasketItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the basket items for the current user.
     * @param {CommerceApiCommerceApiV0PaymentsBasketitemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketitemsRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketitemsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for handling BasketItem operations.
     * @param {CommerceApiCommerceApiV0PaymentsBasketitemsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketitemsUpdate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketitemsUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketitemsUpdate(requestParameters.id, requestParameters.BasketItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates or updates a basket for the current user, adding the discount if valid.
     * @param {CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketsAddDiscountCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsAddDiscountCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketsAddDiscountCreate(requestParameters.discount_code, requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clears the basket for the current user.
     * @param {CommerceApiCommerceApiV0PaymentsBasketsClearDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketsClearDestroy(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsClearDestroyRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketsClearDestroy(requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates or updates a basket for the current user, adding the selected product.
     * @param {CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketsCreateFromProductCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsCreateFromProductCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketsCreateFromProductCreate(requestParameters.sku, requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates or updates a basket for the current user, adding the selected product.
     * @param {CommerceApiCommerceApiV0PaymentsBasketsCreateWithProductsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketsCreateWithProductsCreate(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsCreateWithProductsCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketsCreateWithProductsCreate(requestParameters.CreateBasketWithProductsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns or creates a basket for the current user and system.
     * @param {CommerceApiCommerceApiV0PaymentsBasketsForSystemRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketsForSystemRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsForSystemRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketsForSystemRetrieve(requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrives the current user\'s baskets, one per system.
     * @param {CommerceApiCommerceApiV0PaymentsBasketsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketsList(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsListRequest = {}, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketsList(requestParameters.integrated_system, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a basket for the current user.
     * @param {CommerceApiCommerceApiV0PaymentsBasketsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsBasketsRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsBasketsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsBasketsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates and returns the form payload for the current basket for the specified system, which can be used to start the checkout process.
     * @param {CommerceApiCommerceApiV0PaymentsCheckoutCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsCheckoutCreate(requestParameters: CommerceApiCommerceApiV0PaymentsCheckoutCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsCheckoutCreate(requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a discount.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsDiscountsCreate(options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsDiscountsCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrives the current user\'s completed orders.
     * @param {CommerceApiCommerceApiV0PaymentsOrdersHistoryListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsOrdersHistoryList(requestParameters: CommerceApiCommerceApiV0PaymentsOrdersHistoryListRequest = {}, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsOrdersHistoryList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a completed order for the current user.
     * @param {CommerceApiCommerceApiV0PaymentsOrdersHistoryRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0PaymentsOrdersHistoryRetrieve(requestParameters: CommerceApiCommerceApiV0PaymentsOrdersHistoryRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0PaymentsOrdersHistoryRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a refund from an existing order, optionally specifying which lines to refund.
     * @param {CommerceApiCommerceApiV0RefundsCreateFromOrderCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsCreateFromOrderCreate(requestParameters: CommerceApiCommerceApiV0RefundsCreateFromOrderCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsCreateFromOrderCreate(requestParameters.CreateFromOrderApiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for line items.
     * @param {CommerceApiCommerceApiV0RefundsLinesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsLinesCreate(requestParameters: CommerceApiCommerceApiV0RefundsLinesCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsLinesCreate(requestParameters.RequestLineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for line items.
     * @param {CommerceApiCommerceApiV0RefundsLinesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsLinesDestroy(requestParameters: CommerceApiCommerceApiV0RefundsLinesDestroyRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsLinesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for line items.
     * @param {CommerceApiCommerceApiV0RefundsLinesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsLinesList(requestParameters: CommerceApiCommerceApiV0RefundsLinesListRequest = {}, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsLinesList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for line items.
     * @param {CommerceApiCommerceApiV0RefundsLinesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsLinesPartialUpdate(requestParameters: CommerceApiCommerceApiV0RefundsLinesPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsLinesPartialUpdate(requestParameters.id, requestParameters.PatchedRequestLineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for line items.
     * @param {CommerceApiCommerceApiV0RefundsLinesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsLinesRetrieve(requestParameters: CommerceApiCommerceApiV0RefundsLinesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsLinesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for line items.
     * @param {CommerceApiCommerceApiV0RefundsLinesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsLinesUpdate(requestParameters: CommerceApiCommerceApiV0RefundsLinesUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsLinesUpdate(requestParameters.id, requestParameters.RequestLineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for refund requests.
     * @param {CommerceApiCommerceApiV0RefundsRequestsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsRequestsCreate(requestParameters: CommerceApiCommerceApiV0RefundsRequestsCreateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsRequestsCreate(requestParameters.RequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for refund requests.
     * @param {CommerceApiCommerceApiV0RefundsRequestsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsRequestsDestroy(requestParameters: CommerceApiCommerceApiV0RefundsRequestsDestroyRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsRequestsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for refund requests.
     * @param {CommerceApiCommerceApiV0RefundsRequestsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsRequestsList(requestParameters: CommerceApiCommerceApiV0RefundsRequestsListRequest = {}, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsRequestsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for refund requests.
     * @param {CommerceApiCommerceApiV0RefundsRequestsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsRequestsPartialUpdate(requestParameters: CommerceApiCommerceApiV0RefundsRequestsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsRequestsPartialUpdate(requestParameters.id, requestParameters.PatchedRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for refund requests.
     * @param {CommerceApiCommerceApiV0RefundsRequestsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsRequestsRetrieve(requestParameters: CommerceApiCommerceApiV0RefundsRequestsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsRequestsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint for refund requests.
     * @param {CommerceApiCommerceApiV0RefundsRequestsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0RefundsRequestsUpdate(requestParameters: CommerceApiCommerceApiV0RefundsRequestsUpdateRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0RefundsRequestsUpdate(requestParameters.id, requestParameters.RequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceApiV0UsersMeRetrieve(options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceApiV0UsersMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates or updates a basket for the current user, adding the selected product and discount.
     * @param {CommerceApiCreateBasketFromProductWithDiscountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public createBasketFromProductWithDiscount(requestParameters: CommerceApiCreateBasketFromProductWithDiscountRequest, options?: RawAxiosRequestConfig) {
        return CommerceApiFp(this.configuration).createBasketFromProductWithDiscount(requestParameters.discount_code, requestParameters.sku, requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }
}



